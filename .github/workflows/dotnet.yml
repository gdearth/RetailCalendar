name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    env:
      BUILD_CONFIG: 'Release'
      BUILD_VERSION: '1.0.0'

    runs-on: ubuntu-latest

    steps:

    - name: Get Build Version
      run: |
        
        Write-Host $Env:GITHUB_REF
        $VersionString = $Env:GITHUB_REF

        $VersionString -match "(?<major>\d+)(\.(?<minor>\d+))?(\.(?<patch>\d+))?(\-(?<pre>[0-9A-Za-z\-\.]+))?(\+(?<build>\d+))?" | Out-Null

        if ($matches -eq $null) {
            return "0.0.1"
        }

        # Extract the build metadata
        $BuildRevision = [uint64]$matches['build']
        # Extract the pre-release tag
        $PreReleaseTag = [string]$matches['pre']
        # Extract the patch
        $Patch = $Env:GITHUB_RUN_NUMBER
        # Extract the minor
        $Minor = [uint64]$matches['minor']
        # Extract the major
        $Major = [uint64]$matches['major']

        $Version = [string]$Major + '.' + [string]$Minor + '.' + [string]$Patch;
        #if ($PreReleaseTag -ne [string]::Empty) {
        #    $Version = $Version + '-' + $PreReleaseTag
        #}

        #if ($BuildRevision -ne 0) {
        #    $Version = $Version + '.' + [string]$BuildRevision
        #}

        echo "BUILD_VERSION=$Version" >> $GITHUB_ENV
      shell: pwsh

    - uses: actions/checkout@v2
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release -p:Version= ${{ env.BUILD_VERSION }} -p:AssemblyVersion= ${{ env.BUILD_VERSION }} --no-restore 
    
    - name: Test
      run: dotnet test /p:Configuration=Release --no-build --verbosity normal

    - name: Publish
      if: startsWith(github.ref, 'refs/heads/release')
      run: nuget push **\*.nupkg -Source 'https://api.nuget.org/v3/index.json' -ApiKey ${{secrets.NUGET_API_KEY}}
